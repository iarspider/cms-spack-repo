diff --git a/CondFormats/Serialization/python/condformats_serialization_generate.py b/CondFormats/Serialization/python/condformats_serialization_generate.py
index e0d730302e0..1dae199fb63 100755
--- a/CondFormats/Serialization/python/condformats_serialization_generate.py
+++ b/CondFormats/Serialization/python/condformats_serialization_generate.py
@@ -29,7 +29,7 @@ import subprocess
 
 import clang.cindex
 
-clang_version = None
+clang_version = (4,0,1)
 
 headers_template = '''
 #include "{headers}"
diff --git a/DataFormats/Candidate/src/classes_def.xml b/DataFormats/Candidate/src/classes_def.xml
index c12e06a6a75..dc8f087934b 100644
--- a/DataFormats/Candidate/src/classes_def.xml
+++ b/DataFormats/Candidate/src/classes_def.xml
@@ -233,7 +233,6 @@
   <class name="std::pair<std::basic_string<char>,edm::Ptr<reco::Candidate> >" />
   <class name="std::vector<std::pair<std::basic_string<char>,edm::Ptr<reco::Candidate> > >" />
 
-  <class pattern="std::iterator<std::random_access_iterator_tag,edm::RefToBase<reco::Candidate>*>" />
 </selection>
 <exclusion>
   <class name="edm::OwnVector<reco::Candidate, edm::ClonePolicy<reco::Candidate> >">
diff --git a/DataFormats/L1Trigger/src/classes_def.xml b/DataFormats/L1Trigger/src/classes_def.xml
index 6b9392b2811..dbc03393979 100644
--- a/DataFormats/L1Trigger/src/classes_def.xml
+++ b/DataFormats/L1Trigger/src/classes_def.xml
@@ -155,7 +155,8 @@
   <class name="edm::Wrapper<std::vector<l1extra::L1ParticleMap> >"/>
   <class name="edm::Wrapper<std::vector<l1extra::L1HFRings> >"/>
 
-  <class name="HOTPDigiTwinMux" ClassVersion="14">
+  <class name="HOTPDigiTwinMux" ClassVersion="15">
+   <version ClassVersion="15" checksum="2174527813"/>
     <version ClassVersion="14" checksum="66417560"/>
   </class>
   <class name="std::vector<HOTPDigiTwinMux>"/>
diff --git a/FWCore/PythonParameterSet/interface/BoostPython.h b/FWCore/PythonParameterSet/interface/BoostPython.h
index ff271e3298e..ce3b12c0a4c 100644
--- a/FWCore/PythonParameterSet/interface/BoostPython.h
+++ b/FWCore/PythonParameterSet/interface/BoostPython.h
@@ -2,5 +2,6 @@
 #define FWCore_PythonParameterSet_BoostPython_h
 // avoids compiler warning
 #undef _POSIX_C_SOURCE
+#include <iostream>
 #include <boost/python.hpp>
 #endif
diff --git a/FWCore/Utilities/scripts/edmCheckClassTransients b/FWCore/Utilities/scripts/edmCheckClassTransients
index e4f9ab28ed2..78fd31babb6 100755
--- a/FWCore/Utilities/scripts/edmCheckClassTransients
+++ b/FWCore/Utilities/scripts/edmCheckClassTransients
@@ -60,11 +60,37 @@ oparser.add_option("-f","--rootmap", dest="rmfiles", action="append", default=[]
 
 #Need to not have ROOT load .rootlogon.(C|py) since it can cause interference.
 import ROOT
+import os
+import re
+# On macos with SIP enabled we need to construct our own lib search path
+if "SCRAM_ARCH" in os.environ and re.match('darwin.*',os.environ['SCRAM_ARCH']) :
+    scram_arch=os.environ['SCRAM_ARCH']
+    localtop=os.path.abspath(os.path.dirname(os.path.realpath(__file__))+"/../../../..")
+    libpath=localtop+"/lib/"+scram_arch
+    extlibpath=localtop+"/external/"+scram_arch+"/lib"
+    ROOT.gSystem.AddDynamicPath(libpath)
+    ROOT.gSystem.AddDynamicPath(extlibpath)
+    if "RELEASETOP" in os.environ :
+       releasetop=os.environ['RELEASETOP']
+       rlibpath=releasetop+"/lib/"+scram_arch
+       rextlibpath=releasetop+"/external/"+scram_arch+"/lib"
+       ROOT.gSystem.AddDynamicPath(rlibpath)
+       ROOT.gSystem.AddDynamicPath(rextlibpath)
+    if "SPACK_LINK_DEPS" in os.environ :
+        for p in os.environ['SPACK_LINK_DEPS'].split(':') :
+            ppath=p+'/lib'
+            ROOT.gSystem.AddDynamicPath(ppath)
+    os.environ['DYLD_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+    os.environ['LD_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+    os.environ['DYLD_FALLBACK_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+
+
 ROOT.PyConfig.DisableRootLogon = True
 
 #Keep ROOT from trying to use X11
 ROOT.gROOT.SetBatch(True)
 ROOT.gROOT.ProcessLine(".autodict")
+
 if options.library is None:
     print "Transient member check requires a specific library"
 else:
diff --git a/FWCore/Utilities/scripts/edmCheckClassVersion b/FWCore/Utilities/scripts/edmCheckClassVersion
index 3836d0cea92..0a8bb2dc949 100755
--- a/FWCore/Utilities/scripts/edmCheckClassVersion
+++ b/FWCore/Utilities/scripts/edmCheckClassVersion
@@ -1,5 +1,6 @@
 #!  /usr/bin/env python
 import string
+
 from optparse import OptionParser
 
 class XmlParser(object):
@@ -162,12 +163,38 @@ oparser.add_option("-g","--generate_new",dest="generate", action="store_true",de
 (options,args)=oparser.parse_args()
 
 #Need to not have ROOT load .rootlogon.(C|py) since it can cause interference.
+
 import ROOT
+import os
+import re
+# On macos with SIP enabled we need to construct our own lib search path
+if "SCRAM_ARCH" in os.environ and re.match('darwin.*',os.environ['SCRAM_ARCH']) :
+    scram_arch=os.environ['SCRAM_ARCH']
+    localtop=os.path.abspath(os.path.dirname(os.path.realpath(__file__))+"/../../../..")
+    libpath=localtop+"/lib/"+scram_arch
+    extlibpath=localtop+"/external/"+scram_arch+"/lib"
+    ROOT.gSystem.AddDynamicPath(libpath)
+    ROOT.gSystem.AddDynamicPath(extlibpath)
+    if "RELEASETOP" in os.environ :
+       releasetop=os.environ['RELEASETOP']
+       rlibpath=releasetop+"/lib/"+scram_arch
+       rextlibpath=releasetop+"/external/"+scram_arch+"/lib"
+       ROOT.gSystem.AddDynamicPath(rlibpath)
+       ROOT.gSystem.AddDynamicPath(rextlibpath)
+    if "SPACK_LINK_DEPS" in os.environ :
+        for p in os.environ['SPACK_LINK_DEPS'].split(':') :
+            ppath=p+'/lib'
+            ROOT.gSystem.AddDynamicPath(ppath)
+    os.environ['DYLD_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+    os.environ['LD_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+    os.environ['DYLD_FALLBACK_LIBRARY_PATH']=ROOT.gSystem.GetDynamicPath()
+
 ROOT.PyConfig.DisableRootLogon = True
 
 #Keep ROOT from trying to use X11
 ROOT.gROOT.SetBatch(True)
 ROOT.gROOT.ProcessLine(".autodict")
+
 if options.library is None:
     if options.checkdict :
         print "Dictionary checks require a specific library"
diff --git a/Fireworks/Core/BuildFile.xml b/Fireworks/Core/BuildFile.xml
index a8b4b81875c..00674cca5b3 100644
--- a/Fireworks/Core/BuildFile.xml
+++ b/Fireworks/Core/BuildFile.xml
@@ -29,10 +29,10 @@
 <lib name="Geom"/>
 <lib name="GeomPainter"/>
 <lib name="GuiHtml"/>
-<architecture name="!amd64_clang8">
+<architecture name="!darwin">
 <lib name="GX11"/>
 </architecture>
-<architecture name="amd64_clang8">
+<architecture name="darwin">
 <lib name="GCocoa"/>
 </architecture>
 <lib name="RGL"/>
diff --git a/SimDataFormats/GeneratorProducts/src/classes_def.xml b/SimDataFormats/GeneratorProducts/src/classes_def.xml
index 637e6089450..dc820a4f18d 100644
--- a/SimDataFormats/GeneratorProducts/src/classes_def.xml
+++ b/SimDataFormats/GeneratorProducts/src/classes_def.xml
@@ -16,7 +16,8 @@
     <class name="HepMC::GenCrossSection" ClassVersion="10">
      <version ClassVersion="10" checksum="920043842"/>
     </class>
-	<class name="HepMC::WeightContainer" ClassVersion="14">
+	<class name="HepMC::WeightContainer" ClassVersion="15">
+  <version ClassVersion="15" checksum="376377869"/>
   <version ClassVersion="10" checksum="2163093401"/>
   <version ClassVersion="11" checksum="376377869"/>
   <version ClassVersion="12" checksum="2537869863"/>
@@ -46,9 +47,7 @@
 	<class name="HepMC::GenEvent::vertex_const_iterator"/>
 	<class name="std::vector&lt;HepMC::GenParticle*&gt;"/>
 	<!-- <class name="std::iterator&lt;std::forward_iterator_tag,HepMC::GenVertex*,int,HepMC::GenVertex**,HepMC::GenVertex*& &gt;"/> -->
-	<class pattern="std::iterator&lt;std::forward_iterator_tag,HepMC::GenVertex*&gt;"/>
 	<!-- <class name="std::iterator&lt;std::forward_iterator_tag,HepMC::GenParticle*,int,HepMC::GenParticle**,HepMC::GenParticle*& &gt;"/> -->
-	<class pattern="std::iterator&lt;std::forward_iterator_tag,HepMC::GenParticle*&gt;"/>
 	<!--
 		<class name="HepMC::GenVertex::edge_iterator">
 			<field name="m_set_iter" transient="true"/>
