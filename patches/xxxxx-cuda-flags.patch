--- a/lib/spack/spack/build_systems/cuda.py	2022-11-18 09:14:40.504388168 +0100
+++ b/lib/spack/spack/build_systems/cuda.py	2022-11-18 10:12:36.892567253 +0100
@@ -58,17 +58,40 @@
         when="+cuda",
     )
 
+    # C++ standard to use for building host and device code with nvcc
+    nvcc_stdcxx = '-std=c++17'
+
+    def cuda_flags_4(arch_list):
+        flags = []
+        # --gpu-architecture=<arch> --gpu-code=<code>
+        for arch in arch_list:
+            flags.extend(['--generate-code', 'arch=compute_{0},code=sm_{0}'.format(arch)])
+            flags.extend(['--generate-code', 'arch=compute_{0},code=compute_{0}'.format(arch)])
+        return flags
+
     # https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#nvcc-examples
     # https://llvm.org/docs/CompileCudaWithLLVM.html#compiling-cuda-code
     @staticmethod
     def cuda_flags(arch_list):
-        return [
-            (
-                "--generate-code arch=compute_{0},code=sm_{0} "
-                "--generate-code arch=compute_{0},code=compute_{0}"
-            ).format(s)
-            for s in arch_list
-        ]
+        # CMS
+        # generate optimised code
+        cuda_flags_0 = ['-O3']
+        # generate debugging information for device code
+        cuda_flags_1 = ['--generate-line-info', '--source-in-ptx', '--display-error-number']
+        # imply __host__, __device__ attributes in constexpr functions
+        cuda_flags_2 = ['--expt-relaxed-constexpr']
+        # allow __host__, __device__ attributes in lambda declaration
+        cuda_flags_3 = ['--extended-lambda']
+        # build support for the various compute architectures
+        # disable warnings about attributes on defaulted methods
+        cuda_flags_5 = ['-Xcudafe', '--diag_suppress=esa_on_defaulted_function_ignored']
+        # link the CUDA runtime shared library
+        cuda_flags_6 = ['--cudart', 'shared']
+
+        flags = [] + [CudaPackage.nvcc_stdcxx] + cuda_flags_0 + cuda_flags_1 + cuda_flags_2
+        flags = flags + cuda_flags_3 + CudaPackage.cuda_flags_4(arch_list) + cuda_flags_5 + cuda_flags_6
+
+        return flags
 
     depends_on("cuda", when="+cuda")
 
