diff --git a/lib/spack/spack/directives.py b/lib/spack/spack/directives.py
index 7c49158c791d..315bee305589 100644
--- a/lib/spack/spack/directives.py
+++ b/lib/spack/spack/directives.py
@@ -20,6 +20,9 @@ class OpenMpi(Package):
   * ``build_system``
   * ``conflicts``
   * ``depends_on``
+  * ``drop_conflict``
+  * ``drop_dependency``
+  * ``drop_patch``
   * ``extends``
   * ``patch``
   * ``provides``
@@ -60,6 +63,9 @@ class OpenMpi(Package):
     "patch",
     "variant",
     "resource",
+    "drop_dependency",
+    "drop_patch",
+    "drop_conflict",
     "build_system",
 ]
 
@@ -761,6 +767,52 @@ def _execute_resource(pkg):
     return _execute_resource
 
 
+@directive("dependencies")
+def drop_dependency(name):
+    """Completely remove dependency on a given package"""
+
+    def _execute_remove_dep(pkg):
+        del pkg.dependencies[name]
+
+    return _execute_remove_dep
+
+
+@directive("conflicts")
+def drop_conflict(name):
+    """Completely remove conflict with a given name (first argument to `conflicts`)"""
+
+    def _execute_drop_conflict(pkg):
+        del pkg.conflicts[name]
+
+    return _execute_drop_conflict
+
+
+@directive("patches")
+def drop_patch(name):
+    """Completely remove a patch with a given filename or URL"""
+
+    def _execute_drop_patch(pkg):
+        def filter_func(p):
+            if isinstance(p, spack.patch.FilePatch):
+                return p.relative_path == name
+            elif isinstance(p, spack.patch.UrlPatch):
+                return p.url == name
+            else:
+                # Future-proofing
+                raise RuntimeError("Unknown patch type: " + str(type(p)))
+
+        old_patches = pkg.patches
+        new_patches = {}
+        for spec, patches in old_patches.items():
+            filtered_patches = [p for p in patches if not filter_func(p)]
+            if filtered_patches:
+                new_patches[spec] = filtered_patches
+
+        pkg.patches = new_patches
+
+    return _execute_drop_patch
+
+
 def build_system(*values, **kwargs):
     default = kwargs.get("default", None) or values[0]
     return variant(
